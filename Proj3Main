# <<<<<<< Part-2---K

# part 2 of the project: Scheduling and Payment Calculation 
# This section creates the care schedule and also calclulates payment for the caregivers 

import calendar 

class Scheduler:
  def __init__(self, caregivers):
      """Initialize scheduler with a list of caregivers."""
      self.caregivers = caregivers

  def create_schedule(self, month, year):
      """Generate a care schedule for the given month."""
      cal = calendar.Calendar()
      schedule = defaultdict(list)

      for day, weekday in cal.itermonthdays2(year, month):
          # below skips the padding days
          if day == 0: 
              continue
          for shift in ["AM", "PM"]:
              #Assign caregiver based on availability
              assigned = False 
              for caregiver in self.caregivers:
                  if caregiver.get_availability(calendar.day_name[weekday], shift) != "unavailable":
                      schedule[(day, shift)].append(caregiver.name)
                      assigned = True
                      break
              if not assigned:
                  schedule[(day, shift)].append("Unassigned")

      return schedule

  def calculate_payment(self):
      """Calculate weekly payment for each caregiver."""
      payment_report = {}
      for caregiver in self.caregivers:
          hours_worked = sum (
              1 for ((day, shift), caregivers) in schedule.items() if caregiver.name in caregivers
          )
          weekly_pay = hours_worked * caregiver.pay_rate
          payment_report[caregiver.name] = {"Hours Worked": hours_worked, "Weekly Pay": weekly_pay}
      return payment_report

#Example usage 
if __name__ == "__main__":
    # Assuming caregivers from part 1
    scheduler = Scheduler(manager.caregivers)

    # Create a schedule for November 2024
    schedule = scheduler.create_schedule(11, 2024)

    # Display schedule 
    for key, value in schedule.items():
        print(f"Day {key[0]}, {key[1]} shift: {value}")

    # Calculate payments
    payments = scheduler.calculate_payment()
    print("\nPayment Report:")
    for caregiver, details in payments.items():
        print(f"{caregiver}: {details}")

  
# =======
from collections import defaultdict

#define caregiver class
class Caregiver:
    def __init__(self, name, phone, email, pay_rate=20):
        """Initialize caregiver details."""
        self.name = name
        self.phone = phone
        self.email = email
        self.pay_rate = pay_rate  
        self.availability = defaultdict(lambda: "available")  

    def set_availability(self, day, shift, status):
        """Set caregiver availability for a specific day and shift."""
       
        self.availability[(day, shift)] = status

    def get_availability(self, day, shift):
        """Retrieve caregiver availability for a specific day and shift."""
        return self.availability[(day, shift)]

    def __str__(self):
        """String representation for caregiver."""
        return f"Caregiver: {self.name}, Phone: {self.phone}, Email: {self.email}"

#list of caregivers 
class CaregiverManager:
    def __init__(self):
        """Initialize caregiver manager."""
        self.caregivers = []

    def add_caregiver(self, caregiver):
        """Add a caregiver to the manager."""
        self.caregivers.append(caregiver)

    def list_caregivers(self):
        """List all caregivers."""
        for caregiver in self.caregivers:
            print(caregiver)

#ex. 
if __name__ == "__main__":
    manager = CaregiverManager()

    #caregivers 
    caregiver1 = Caregiver("Jasmine Price", "944-5489", "PriceJas@inst.com")
    caregiver2 = Caregiver("Preston Robby", "447-8374", "PresRob@inst.com")
    manager.add_caregiver(caregiver1)
    manager.add_caregiver(caregiver2)

    #availability
    caregiver1.set_availability("Tuesday", "AM", "preferred")
    caregiver1.set_availability("Friday", "PM", "unavailable")

    #caregivers displayed 
    manager.list_caregivers()
# >>>>>>> main
